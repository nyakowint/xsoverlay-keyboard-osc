name: Build & Release

concurrency:
  group: "build"
  cancel-in-progress: true

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '**.js'
      - '**.ps1'
  workflow_dispatch:
jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout XSO assemblies
        uses: actions/checkout@v4
        with:
          repository: ${{ secrets.xsoRepo }}
          token: ${{ secrets.repoToken }}
          path: refs

      - name: Setup .NET
        uses: actions/setup-dotnet@v3.2.0
        with:
          dotnet-version: '9.0.x'

      - name: Add Bepis NuGet & Restore dependencies
        run: |
          dotnet nuget add source https://nuget.bepinex.dev/v3/index.json
          dotnet restore

      - name: Build
        run: dotnet build -c Release --no-restore

      # Read the base version from VERSION file
      - name: Read version
        id: version
        shell: pwsh
        run: |
          if (-Not (Test-Path VERSION)) { Write-Error "VERSION file not found" }
          $version = (Get-Content VERSION -Raw).Trim()
          if (-not $version) { Write-Error "VERSION file is empty" }
          echo "version=$version" >> $env:GITHUB_OUTPUT

      # Read changelog content
      - name: Read changelog
        id: changelog
        shell: pwsh
        run: |
          $changelogPath = "CHANGELOG.md"
          
          if (Test-Path $changelogPath) {
            $content = Get-Content $changelogPath -Raw
            Write-Host "Found CHANGELOG.md, using its content"
            # Escape special characters for GitHub Actions
            $content = $content -replace '%', '%25'
            $content = $content -replace '\n', '%0A'
            $content = $content -replace '\r', '%0D'
            echo "notes=$content" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "CHANGELOG.md not found, using default notes"
            $notes = "Automated build"
            echo "notes=$notes" >> $env:GITHUB_OUTPUT
          }

      # Create a GitHub Release using VERSION + short commit SHA as tag (e.g. 1.2.5+abcdef0)
      - name: Create Release
        shell: pwsh
        run: |
          $short_sha="${{ github.sha }}".Substring(0,7)
          $version="${{ steps.version.outputs.version }}"
          $tag="$version+$short_sha"
          $changelog = "${{ steps.changelog.outputs.notes }}"
          
          $releaseNotes = @"
## KeyboardOSC $tag

**Commit:** ${{ github.sha }}

---

$changelog
"@
          
          Write-Host "Creating release with tag $tag"
          
          # Save notes to a temporary file to avoid command line length issues
          $notesFile = "release-notes.md"
          $releaseNotes | Out-File -FilePath $notesFile -Encoding UTF8
          
          gh release create $tag ./builds/Release/net472/KeyboardOSC.dll ./BepInEx.cfg --title "KeyboardOSC $tag" --prerelease --notes-file $notesFile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
